# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1
        environment:
          DATABASE_URL: postgresql://root@localhost/circle_test?sslmode=disable

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built img
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/postgres:9.6.2
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: circle_test

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: Define environment variables
          command: |
            echo 'export SECRET_KEY=${TEST_SECRET_KEY}' >> $BASH_ENV
            echo 'export DATABASE_URL=${TEST_DATABASE_URL}' >> $BASH_ENV
            echo 'export MESSENGER_ACCESS_TOKEN=${TEST_MESSENGER_ACCESS_TOKEN}' >> $BASH_ENV
            echo 'export DEBUG_ENABLE=${TEST_DEBUG_ENABLE}' >> $BASH_ENV
            echo 'export LOGENTRIES_TOKEN=${TEST_LOGENTRIES_TOKEN}' >> $BASH_ENV
            echo 'export BASE_URL=${TEST_BASE_URL}' >> $BASH_ENV
            echo 'export PROD_STATUS=${TEST_PROD_STATUS}' >> $BASH_ENV
            echo 'export SENTRY_URL=${TEST_SENTRY_URL}' >> $BASH_ENV
            echo 'export STREAMABLE_PASSWORD=${TEST_STREAMABLE_PASSWORD}' >> $BASH_ENV

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            python manage.py test

      - store_artifacts:
          path: test-reports
          destination: test-reports

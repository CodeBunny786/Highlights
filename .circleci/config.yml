version: 2

jobs:
  test:
    docker:
      - image: python:3.6

      - image: circleci/postgres:9.6.2
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: circle_test

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - test-dependencies-{{ checksum "requirements.txt" }}
            - test-dependencies-  # fallback to using the latest cache if no exact match is found

      - run:
          name: Define environment variables
          command: |
            echo 'export SECRET_KEY=${TEST_SECRET_KEY}' >> $BASH_ENV
            echo 'export DATABASE_URL=${TEST_DATABASE_URL}' >> $BASH_ENV
            echo 'export MESSENGER_ACCESS_TOKEN=${TEST_MESSENGER_ACCESS_TOKEN}' >> $BASH_ENV
            echo 'export DEBUG_ENABLE=${TEST_DEBUG_ENABLE}' >> $BASH_ENV
            echo 'export LOGENTRIES_TOKEN=${TEST_LOGENTRIES_TOKEN}' >> $BASH_ENV
            echo 'export BASE_URL=${TEST_BASE_URL}' >> $BASH_ENV
            echo 'export PROD_STATUS=${TEST_PROD_STATUS}' >> $BASH_ENV
            echo 'export SENTRY_URL=${TEST_SENTRY_URL}' >> $BASH_ENV
            echo 'export STREAMABLE_PASSWORD=${TEST_STREAMABLE_PASSWORD}' >> $BASH_ENV

      - run:
          name: Install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      - run:
          name: Run tests
          command: |
            . venv/bin/activate
            python manage.py test

      - store_artifacts:
          path: test-reports
          destination: test-reports

  build_and_push_image:
    machine: true

    steps:
      - checkout

      - run:
          name: Push to google container registry
          command: |
            echo ${GCLOUD_SERVICE_KEY} > ${HOME}/gcp-key.json
            docker build --rm=false -t eu.gcr.io/${GOOGLE_PROJECT_ID}/${GOOGLE_IMAGE_NAME}:${CIRCLE_SHA1} .
            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud docker -- push eu.gcr.io/${GOOGLE_PROJECT_ID}/${GOOGLE_IMAGE_NAME}:${CIRCLE_SHA1}


  deploy_prod:
    docker:
      - image: google/cloud-sdk

    steps:
      - checkout

      - run:
          name: Define environment variables
          command: |
            echo 'export SECRET_KEY=${PROD_SECRET_KEY}' >> $BASH_ENV
            echo 'export DATABASE_URL=${PROD_DATABASE_URL}' >> $BASH_ENV
            echo 'export MESSENGER_ACCESS_TOKEN=${PROD_MESSENGER_ACCESS_TOKEN}' >> $BASH_ENV
            echo 'export DEBUG_ENABLE=${PROD_DEBUG_ENABLE}' >> $BASH_ENV
            echo 'export LOGENTRIES_TOKEN=${PROD_LOGENTRIES_TOKEN}' >> $BASH_ENV
            echo 'export BASE_URL=${PROD_BASE_URL}' >> $BASH_ENV
            echo 'export PROD_STATUS=${PROD_PROD_STATUS}' >> $BASH_ENV
            echo 'export SENTRY_URL=${PROD_SENTRY_URL}' >> $BASH_ENV
            echo 'export STREAMABLE_PASSWORD=${PROD_STREAMABLE_PASSWORD}' >> $BASH_ENV
            echo 'export DJANGO_STATIC_HOST=${PROD_DJANGO_STATIC_HOST}' >> $BASH_ENV

      - run:
          name: Substitute environment variables in kubernetes files
          command: |
            apt-get install -qq -y gettext
            sh sub_env_vars_k8s.sh

      - run:
          name: Kubernetes deployment
          command: |
            echo ${GCLOUD_SERVICE_KEY} > gcp-key.json
            gcloud auth activate-service-account --key-file gcp-key.json
            gcloud container clusters get-credentials highlights-bot-cluster --zone ${GOOGLE_COMPUTE_ZONE} --project ${GOOGLE_PROJECT_ID}
            kubectl apply -f kubernetes --recursive
            kubectl rollout status deployment.v1.apps/${GOOGLE_IMAGE_NAME}-web-deployment


  deploy_static_assets_and_migrate:
    docker:
      - image: google/cloud-sdk
        environment:
          TERM: linux
          TERMINFO: /etc/terminfo

    working_directory: ~/repo

    steps:
      - checkout

      # Download dependencies
      - restore_cache:
          keys:
            - deploy-dependencies-{{ checksum "requirements.txt" }}
            - deploy-dependencies-  # fallback to using the latest cache if no exact match is found

      - run:
          name: Define environment variables
          command: |
            echo 'export SECRET_KEY=${PROD_SECRET_KEY}' >> $BASH_ENV
            echo 'export DATABASE_URL=${PROD_DATABASE_URL}' >> $BASH_ENV
            echo 'export MESSENGER_ACCESS_TOKEN=${PROD_MESSENGER_ACCESS_TOKEN}' >> $BASH_ENV
            echo 'export DEBUG_ENABLE=${PROD_DEBUG_ENABLE}' >> $BASH_ENV
            echo 'export LOGENTRIES_TOKEN=${PROD_LOGENTRIES_TOKEN}' >> $BASH_ENV
            echo 'export BASE_URL=${PROD_BASE_URL}' >> $BASH_ENV
            echo 'export PROD_STATUS=${PROD_PROD_STATUS}' >> $BASH_ENV
            echo 'export SENTRY_URL=${PROD_SENTRY_URL}' >> $BASH_ENV
            echo 'export STREAMABLE_PASSWORD=${PROD_STREAMABLE_PASSWORD}' >> $BASH_ENV
            echo 'export DJANGO_STATIC_HOST=${PROD_DJANGO_STATIC_HOST}' >> $BASH_ENV

      - run:
          name: Install dependencies
          command: |
            apt-get install -qq -y python3-pip python3-venv
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - run:
          name: Generate static files
          command: |
            curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
            curl -sL https://deb.nodesource.com/setup_8.x | bash -
            echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
            apt-get update
            apt-get install -qq -y nodejs yarn
            cd static
            yarn install
            yarn run prod

      - run:
          name: Upload static files and migrate
          command: |
            . venv/bin/activate
            python manage.py collectstatic --noinput --ignore src/
            echo ${GCLOUD_SERVICE_KEY} > gcp-key.json
            gcloud auth activate-service-account --key-file gcp-key.json
            gsutil -m rsync -d -r staticfiles/ gs://highlights-bot/static

      - run:
          name: Migrate application
          command: |
              . venv/bin/activate
              python manage.py migrate

      - save_cache:
          paths:
            - ./venv
          key: deploy-dependencies-{{ checksum "requirements.txt" }}

workflows:
  version: 2
  deployment:
    jobs:
      - test
      - build_and_push_image:
          requires:
            - test
#          filters:
#            branches:
#              only: master
#      - deploy_approval:
#          type: approval
#          requires:
#            - build_and_push_image
      - deploy_prod:
          requires:
            - build_and_push_image
      - deploy_static_assets_and_migrate:
          requires:
            - deploy_prod